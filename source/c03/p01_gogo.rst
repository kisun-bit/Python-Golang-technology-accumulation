
3.1 Why Go?
===============

开发人员在为项目选择语言时，不得不在快速开发和性能之间做出选择。*C* 和 *C++* 这类语言提供了很快的执行速度，而 *Ruby* 和 *Python* 这类语言则擅长快速开发。*Go* 语言在这两者间架起了桥梁，不仅提供了高性能的语言，同时也让开发更快速。

为什么要创造一门编程语言
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

* C/C++ 的发展速度无法跟上计算机发展的脚步，十多年来也没有出现一门与时代相符的主流系统编程语言，因此人们需要一门新的系统编程语言来弥补这个空缺，尤其是在计算机信息时代。
* 相比计算机性能的提升，软件开发领域不被认为发展得足够快或者比硬件发展得更加成功（有许多项目均以失败告终），同时应用程序的体积始终在不断地扩大，这就迫切地需要一门具备更高层次概念的低级语言来突破现状。
* 在 Go 语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go 语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。

语言的特性
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

* Go 语言从本质上（程序和结构方面）来实现并发编程。
* 因为 Go 语言没有类和继承的概念，所以它和 Java 或 C++ 看起来并不相同。但是它通过接口（interface）的概念来实现多态性。Go 语言有一个清晰易懂的轻量级类型系统，在类型之间也没有层级之说。因此可以说这是一门混合型的语言。
* 在传统的面向对象语言中，使用面向对象编程技术显得非常臃肿，它们总是通过复杂的模式来构建庞大的类型层级，这违背了编程语言应该提升生产力的宗旨。
* 函数是 Go 语言中的基本构件，它们的使用方法非常灵活。在第六章，我们会看到 Go 语言在函数式编程方面的基本概念。
* Go 语言使用静态类型，所以它是类型安全的一门语言，加上通过构建到本地代码，程序的执行速度也非常快。
* 作为强类型语言，隐式的类型转换是不被允许的，记住一条原则：让所有的东西都是显式的。
* Go 语言其实也有一些动态语言的特性（通过关键字 var），所以它对那些逃离 Java 和 .Net 世界而使用 Python、Ruby、PHP 和 JavaScript 的开发者们也具有很大的吸引力。
* Go 语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发运行 Windows 下运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go 语言做到了真正的国际化！


比比叨（吐槽）
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

许多能够在大多数面向对象语言中使用的特性 Go 语言都没有支持，但其中的一部分可能会在未来被支持。

* 为了简化设计，不支持函数重载和操作符重载
* 为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换
* Go 语言通过另一种途径实现面向对象设计来放弃类和类型的继承
* 尽管在接口的使用方面（第 11 章）可以实现类似变体类型的功能，但本身不支持变体类型
* 不支持动态加载代码
* 不支持动态链接库
* 不支持泛型
* 通过 recover 和 panic 来替代异常机制（第 13.2-3 节）
* 不支持静态变量